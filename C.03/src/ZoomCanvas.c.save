#include <gtk/gtk.h>
#include "ZoomCanvas.h"
#include "capture.h"
//#include "capture3.c"/*errado*/
#include "algoritmos.h"
#include "debug.h"
#include "util.h"
#include "clique.h"
#include "profile.h"
static char buffer[256];
static GtkWidget *canvas;

static double acc=0;
static int cont=0;

void *captura_clique()
{
	int x ;
	
		x=0;
		printf("%d\n",x);
		x = get_clique();
		printf("%d\n",x);
		if( x != 0 )
				verifica_clique = 1;else
		verifica_clique = 0;
}

void free_resources(gpointer data){
	puts("LIBERANDO DISPOSITIVO");
	void stop_capturing(void);
	void uninit_device (void);
	void close_device (void);

}


void processa_imagem(unsigned char *ini){
    int width = 640;
    int height = 480;
    int j;		
	GdkPixbuf *pixbuf = gdk_pixbuf_new_from_data(ini, GDK_COLORSPACE_RGB, 0, 8, width, height, width*3, NULL, NULL);
	
	if( verifica_clique ==  1)
	{
		refresh_profile();
		change_config();
	}
	if(gray){//escala cinza
	  	imagem_to_cinza(pixbuf);
	 }
	if(color){//cor de frente e fundo
		guchar cor1[]={255,0,0};
		guchar cor2[]={255,255,255};
		limiar_imagem(pixbuf, cor1, cor2, 127);
	}
	
	if(brilho!=50 || contraste!=50){
		 brilho_contraste_imagem(pixbuf, brilho/100., contraste/100.);
	}

	cairo_t* cr = gdk_cairo_create(canvas->window);
	
	cairo_translate(cr, 0,-100);
	cairo_scale(cr, zoom,zoom);	

	gdk_cairo_set_source_pixbuf(cr, pixbuf, 0, 0);

	cairo_paint(cr);
	g_object_unref(G_OBJECT(pixbuf));
	cairo_destroy(cr);
	
}


gboolean time_handler(GtkWidget *widget)
{
	static int temp=0;
	register_time();
	call_process_image(processa_imagem);
	double t = get_time_mili();
	if(temp++>7){
 		acc+=t;
 		cont++;
 		printf("Amostragem: %3d | Atual : %10.2lfms | MÃ©dia: %10.2lfms\n",cont, t, acc/cont);
 	}
	

}



GtkWidget* zoom_canvas_new(){
	
	canvas = gtk_drawing_area_new();
	g_signal_connect(canvas,"expose-event", G_CALLBACK(zoom_canvas_on_expose_event), NULL);
	open_device();
    init_device();
    start_capturing();

//	g_timeout_add(100, (GSourceFunc) time_handler, (gpointer) widget);
	g_timeout_add_full(G_PRIORITY_HIGH+20, taxa_refresh, (GSourceFunc) time_handler, canvas, (GDestroyNotify)free_resources);
	
	return canvas;
}



gboolean zoom_canvas_on_expose_event(GtkWidget *widget, GdkEventExpose *event, gpointer data){
	/*cairo_t* cr = gdk_cairo_create(widget->window);
	cairo_surface_t *image = cairo_image_surface_create_from_png ("./bola.png");
	int i;
	GdkPixbuf* buffer =  read_frame();
	gdk_cairo_set_source_pixbuf(cr, buffer, 0, 0);
	cairo_paint(cr);*/
	return TRUE;

}

void change_config()
{
	int status;
	status = get_profile();
	if( status == 0)
	{
		zoom = 1;
		gray = 0;
		color = 0;
		verifica_clique = 0;
	}
	if( status == 1)
	{
		zoom = 2;
		gray = 0;
		color = 0;
		verifica_clique = 0;
	}
	if( status == 2)
	{	
		zoom = 2;
		gray = 1;
		color = 0;
		verifica_clique = 0;
	}
	if( status == 3)
	{
		zoom = 2;
		gray = 0;
		color = 1;
		verifica_clique = 0;
	}
	if( status == 4)
	{
		zoom = 3;
		gray = 0;
		color = 0;
		verifica_clique = 0;
	}
}
